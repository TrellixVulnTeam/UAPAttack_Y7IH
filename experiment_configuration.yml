dataset:
  cifar10:
    NUM_CLASSES:  !!int 10
    NUM_CHANNELS: !!int 3
    IMG_SIZE:     !!int 32
  gtsrb:
    NUM_CLASSES:  !!int 43
    NUM_CHANNELS: !!int 3
    IMG_SIZE:     !!int 32
  imagenet:
    NUM_CLASSES:  !!int 10
    NUM_CHANNELS: !!int 3
    IMG_SIZE:     !!int 224

network:
  PRETRAINED:     !!bool false

train:
  LR:             !!float 0.007
  WEIGHT_DECAY:   !!float 0.0005
  MOMENTUM:       !!float 0.9
  USE_TRANSFORM:  !!bool true
  USE_CLIP:       !!bool false
  DISTRIBUTED:    !!bool false

  cifar10:
    N_EPOCHS:     !!int 20
    BATCH_SIZE:   !!int 64
    MILE_STONE:   !!seq [50, 100, 150]
    T_MAX:        !!int 200
    GAMMA:        !!float 0.1
    BACKEND:       !!str 'nccl'
  gtsrb:
    N_EPOCHS:     !!int 200
    BATCH_SIZE:   !!int 64
    MILE_STONE:   !!seq [50, 100, 150]
    T_MAX:        !!int 200
    GAMMA:        !!float 0.1
    BACKEND:      !!str 'nccl'
  imagenet:
    N_EPOCHS:     !!int 80
    BATCH_SIZE:   !!int 8
    MILE_STONE:   !!seq [20, 40, 60]
    T_MAX:        !!int 80
    GAMMA:        !!float 0.1
    BACKEND:      !!str 'nccl'

attack: 
  TRIGGER_SIZE:   !!float 10
  TROJ_FRACTION:  !!float 0.2
  SOURCE_TARGET_PAIR: !!map {0: 1}
  TRIGGER_SAVE_DIR: !!str '/scr/songzhu/trojai/uapattack/triggers'
  # TRIGGER_SAVE_DIR: !!str '/data/songzhu/uapattack/triggers'

  badnet:
    TRIGGER_SHAPE: !!int 3
  ref: 
    REFSET_ROOT:   !!str '/scr/songzhu/pascal'   # PASCAL root (PASCAL imgs are used as trigger candidate)/data/songzhu/pascal
    # REFSET_ROOT: !!str '/data/songzhu/pascal'
    # N_IMG: !!int 50                            # num of trigger candidate
    N_TRIGGER:     !!int 200                     # num of finally kept triggers
    T_EPOCH:       !!int 10                      # trigger generation optimization iterations
    GHOST_RATE:    !!float 0.39                  # ratio to use ghost reflection
    SAVE_TRIGGER:  !!bool true                
    REUSE_TRIGGER: !!bool false                  # load trigger from TRIGGER_PATH
    TRIGGER_PATH:  !!str '/scr/songzhu/pascal/trigger.pkl'
    # TRIGGER_PATH: !!str '/data/songzhu/pascal'
  warp:
    CROSS_RATE: !!float 2
    S:          !!float 0.5
    K:          !!int 4
  imc:
    N_TRIGGER:     !!int 1
    TRIGGER_ALPHA: !!float  0.5
    TRIGGER_LR:    !!float 0.1
    NEURON_EPOCH:  !!int 1000
  uap:
    OPTIM_EPOCHS:  !!int 10
    N_IMAGES:      !!int 300      # num of images to be edited by UAP
    N_UAP:         !!int 1        # num of UAP pattern used
    FOOLING_RATE:  !!float 0.8    # proportion of images to be fooled before termination
    DYNAMIC:       !!bool false   # whether to dynamically inject trojan
  ulp:
    OPTIM_EPOCHS:  !!int 10
    N_IMAGES:      !!int 300      # num of images to be edited by ULP
    NUM_MODELS:    !!int 5        # num of models used to generate ULP
    N_ULP:         !!int 1        # num of ULP pattern used
    FOOLING_RATE:  !!float 0.9    # proportion of images to be fooled before termination
    DYNAMIC:       !!bool false   # true to use dynamic injection (inject during training process)
    LABEL_CLEAN:   !!bool true    # true to use clean-label attack version

adversarial:
  ADV_TRAIN:    !!bool false      # use adversarial training
  EPS:          !!float 1         # step size
  RADIUS:       !!float 1         # defense radius
  OPTIM_EPOCHS: !!int 1
  LAMBDA:       !!float 0.2       # coefficient for adv training loss

misc:
  VERBOSE:        !!bool true
  MONITOR_WINDOW: !!int 1
